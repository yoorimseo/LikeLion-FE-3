# git? 버전 관리 프로그램!

Hello in master branch

git add 파일명
git commit -m '메세지'

git add 파일명1 파일명2            // 여러 파일을 동시에 스테이징
git add .                      // 작업폴더의 모든 파일을 전부 스테이징

git status                     // 지금 변경된 파일, 스테이징된 파일 확인

git restore -- staged 파일명    // 스테이징 된 파일 취소

// 커밋 기록을 한 눈에 확인하기
git log --all --oneline
git log --all --oneline --graph
// j, k로 위아래 스크롤 q로 종료

git diff        // 수정된 부분 확인 가능
git difftool    // h j k l 방향키, :q or :qa 종료

// git difftool을 Vim 말고 VSCodeh로 열고 싶으면?
git commit --global diff.tool vscode
git commit --global difftool.vscode.cmd'code --wait --diff $LOCAL $REMOTE'

-------------------

# 브랜치 생성
git branch 브랜치명
git switch 브랜치명
git status // 현재 어떤 브랜치에 있는지 확인 가능

git log --oneline --all --graph    // branch와 commit 내역 확인

# 브랜치 삭제
git branch -d 브랜치명  // merge 완료된 브랜치 삭제
git branch -D 브랜치명  // merge 안한 브랜치 삭제

# 다양한 merge 방법(3-way, fast-forword, squash, rebase)
git merge 신규 브랜치명
// 중심 브랜치로 넘어와서 진행
// ex) 중심 브랜치와 test 브랜치에서 같은 파일, 같은 줄을 수정했을 경우 > merge comflict! > 해당 부분 수정하고 다시 커밋

git rebase 중심 브랜치명
// rebase는 브랜치의 시작점을 다른 commit으로 옮겨주는 행위
// merge 말고 rebase를 사용하여 합치기 > 간단하고 짧은 브랜치들을 깔끔하게 합칠 수 있음, 그러나 충돌이 많이 발생할 수 있음
// 중심 브랜치가 아닌 신규 브랜치로 넘어와서 진행 > 그리고 중심 브랜치로 와서 merge

git merge --squash 브랜치명
// 새 브랜치에 있던 코드 변경사항들이 중심 브랜치로 텔레포트!
// 중심 브랜치로 넘어와서 진행 > 그리고 커밋

-------------------

# 파일 되돌리기
git restore 파일명

// 이전에 작업한 것을 제거하는 커밋 생성하기
git revert 특정커밋id        // 커밋 id 여러개 취소 가능
git revert HEAD            // 최근 커밋 취소 가능

git reset --hard 커밋id     // 해당 커밋이 생성된 시점으로 모두 돌아감, 협업 시에 사용금지
git reset --soft 커밋id     // 리셋이지만 변동사항을 지우지 않고 스테이징 해놓음
git reset --mixed 커밋id    // 리셋이지만 변동사항을 지우지 않고 unstage 해놓음

-------------------

git push -u 저장소주소 master         // -u : 주소를 기억하라는 뜻이기 때문에, 그 다음부터는 git push만 해도 가능

git remote add 변수이름 저장소 주소     // 저장소 주소를 변수에 저장해서 사용하기

-------------------

git clone 저장소주소                  // 내가 원하는 폴더 > vscodep에서 열기 > 해당 코드 복제 가능
// 깃헙 > 세팅 > collaborators에 팀원의 깃헙 아이디 등록해놔야 git push 가능

git pull 저장소주소                   // 다른 사람이 먼저 push를 해서 안 되는 경우에 사용
// 이전에 같은 저장소로 git push한 내용이 있으면 git pull만 해도 가능, 후에 push 진행
// 브랜치 명시 가능, 저장소주소 변수에 저장해서 사용 가능
// git pull > git fetch + git merge의 축약어
// git fetch : 커밋 중에 로컬에 없는 신규 커밋을 가져오라는 뜻
// git merge : 그것을 merge하라는 의미

-------------------

git push 저장소주소 브랜치명        // 로컬 브랜치를 저장소에 업로드

-------------------
# 코르를 잠깐 다른 곳에 보관하기
git stash
git stash save '메모'

git stash list          // 현재 stash 되어 있는 코드 목록 전부 출력

git stash pop           // 가장 최근에 보관했던 코드를 다시 불러옴

git stash drop 삭제할id   // 특정 stash 삭제
git stash clear         // 모든 stash 삭제

git stash -p            // 일부 코드만 gti stash, 코드를 훑으

// 주석처리하는 것과 용도가 비슷하지만, 주석은 커밋할 때 반영되기 때문에 기록이 더러워질 수 있음
// stash 말고 브랜치를 새로 만들어서 코드를 작성하는 것도 나쁘지 않음